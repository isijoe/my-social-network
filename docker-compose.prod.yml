version: "3.9"
services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    # command: python /usr/src/app/manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/usr/src/app/backend
      - staticfiles:/usr/src/app/backend/staticfiles
      - mediafiles:/usr/src/app/backend/media
    ports:
      - 8000:8000
    depends_on:
      - db
    env_file:
      - ./backend/.env
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/app/frontend
      - frontend:/usr/src/app/frontend/build
    ports:
      - 3000:3000
    depends_on:
      - backend
    # restart: always

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"

  nginx:
    image: nginx:stable-alpine
    volumes:
      - staticfiles:/usr/src/app/backend/staticfiles
      - mediafiles:/usr/src/app/backend/media
      - frontend:/var/www/frontend
      - ./certbot/nginx/conf:/etc/nginx/conf.d/:rw
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf:/etc/letsencrypt/:ro
      # - ./certbot/conf:/etc/nginx/ssl/:ro
    ports:
      - 80:80
      - 443:443
    depends_on:
      - frontend
      - backend
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot/:rw
      - ./certbot/conf:/etc/letsencrypt/:rw
      - ./certbot/start.sh:/start.sh
    entrypoint: "/bin/sh /start.sh"

volumes:
  postgres_data:
  staticfiles:
  mediafiles:
  frontend:

